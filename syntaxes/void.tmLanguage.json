{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Void",
  "patterns": [{ "include": "#expression" }],
  "repository": {
    "expression": {
      "patterns": [
        { "include": "#function-call" },
        { "include": "#types" },
        { "include": "#strings" },
        { "include": "#comment" },
        { "include": "#keywords" },
        { "include": "#function-definition" },
        { "include": "#number" },
        { "include": "#identifier" },
        { "include": "#identifier-literal" },
        { "include": "#operator" },
        { "include": "#paren-expression" }
      ]
    },
    "comment": {
      "begin": "//",
      "end": "\n",
      "name": "comment.line.double-slash"
    },
    "function-definition": {
      "name": "entity.name.function",
      "begin": "fn ",
      "end": "\\(",
      "beginCaptures": {
        "0": { "name": "keyword" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.paren.open" }
      },
      "contentName": "meta.function",
      "patterns": [
        {
          "name": "constant",
          "match": "[^\\s\\.]+"
        }
      ]
    },
    "function-call": {
      "name": "meta.function-call.void",
      "begin": "\\b(([A-Z][\\w]*)|([a-z_][\\w]*))\\b(?=<|\\()",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.void"
        },
        "2": {
          "name": "entity.name.type.void"
        }
      },
      "end": "\\(",
      "patterns": [
        {
          "name": "meta.type-arguments.void",
          "begin": "<",
          "end": ">",
          "beginCaptures": {
            "0": {
              "name": "punctuation.paren.open.void"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.paren.close.void"
            }
          },
          "patterns": [
            {
              "match": "\\b[a-zA-Z_][\\w]*\\b",
              "name": "entity.name.type.void"
            },
            {
              "match": ",",
              "name": "punctuation.separator.comma.void"
            }
          ]
        },
        {
          "match": "\\(",
          "name": "punctuation.paren.open.void"
        },
        {
          "match": "\\)",
          "name": "punctuation.paren.close.void"
        }
      ]
    },
    "types": {
      "name": "entity.name.type",
      "match": "\\b([A-Z][a-zA-Z]*)\\b"
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.void",
          "match": "\\b(if|while|for|return|break)\\b"
        },
        {
          "name": "keyword.operator.new",
          "match": "\\b(let|var|define|macro|global)\\b"
        },
        {
          "name": "keyword",
          "match": "\\b(fn|type|use|pub|where|obj|extends)\\b"
        },
        {
          "name": "entity.name.type",
          "match": "(i32|f32|f64|i64|bool|void)"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.void",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.void",
          "match": "\\\\."
        }
      ]
    },
    "operator": {
      "name": "keyword.operator",
      "match": "\\s(=|==|\\?|\\.|\\+|\\-|\\\\|\\*|=>|>=|<=|<|>|\\&|\\*\\*\\*|->|and|or|is)\\s"
    },
    "identifier": {
      "name": "variable.name",
      "match": "[^\\s\\.\\:\\,]+"
    },
    "number": {
      "name": "constant.numeric",
      "match": "[+-]?\\d+(\\.\\d+$)?"
    },
    "identifier-literal": {
      "name": "entity.name",
      "begin": "'",
      "end": "'"
    },
    "paren-expression": {
      "begin": "\\b[\\(\\{\\[]\\b",
      "end": "\\b[\\)\\}\\]]\\b",
      "beginCaptures": {
        "0": { "name": "punctuation.paren.open" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.paren.close" }
      },
      "name": "expression.group",
      "patterns": [{ "include": "#expression" }]
    }
  },
  "scopeName": "source.void"
}
